{"version":3,"sources":["../src/panel-page.tsx"],"names":["PageRoom","options","classType","page","id","split","canConnect","loading","htmlData","setHTMLData","update","connect","connected","PS","send","connectWhenLoggedIn","PSRoom","PageLadderHelp","props","room","PagePanel","clientRooms","receiveLine","args","title","body","notify","dismissNotification","pageHTMLContainer","base","querySelector","selectedElement","innerHTML","BattleLog","sanitizeHTML","slice","join","isSubtleNotifying","render","renderPage","undefined","PSRoomPanel","roomTypes","Model","Component","updateRoomTypes"],"mappings":"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","sourcesContent":["/**\n * Page Panel\n *\n * Panel for static content and server-rendered HTML.\n *\n * @author Adam Tran <aviettran@gmail.com>\n * @license MIT\n */\n\nclass PageRoom extends PSRoom {\n\treadonly classType: string = 'html';\n\treadonly page?: string = this.id.split(\"-\")[1];\n\treadonly canConnect = true;\n\n\tloading: boolean = true;\n\thtmlData?: string;\n\n\tsetHTMLData = (htmlData?: string) => {\n\t\tthis.loading = false;\n\t\tthis.htmlData = htmlData;\n\t\tthis.update(null);\n\t};\n\n\tconstructor(options: RoomOptions) {\n\t\tsuper(options);\n\t\tthis.connect();\n\t}\n\tconnect() {\n\t\tif (!this.connected) {\n\t\t\tPS.send(`|/join ${this.id}`);\n\t\t\tthis.connected = true;\n\t\t\tthis.connectWhenLoggedIn = false;\n\t\t}\n\t}\n}\n\nfunction PageLadderHelp(props: {room: PageRoom}) {\n\tconst {room} = props;\n\treturn <div class=\"ladder pad\">\n\t\t<p>\n\t\t\t<button name=\"selectFormat\" data-href=\"ladder\" data-target=\"replace\">\n\t\t\t\t<i class=\"fa fa-chevron-left\"></i> Format List\n\t\t\t</button>\n\t\t</p>\n\t\t<h3>How the ladder works</h3>\n\t\t<p>\n\t\t\tOur ladder displays three ratings: Elo, GXE, and Glicko-1.\n\t\t</p>\n\t\t<p>\n\t\t\t<strong>Elo</strong> is the main ladder rating. It's a pretty\n\t\t\tnormal ladder rating: goes up when you win and down when you\n\t\t\tlose.\n\t\t</p>\n\t\t<p>\n\t\t\t<strong>GXE</strong> (Glicko X-Act Estimate) is an estimate of\n\t\t\tyour win chance against an average ladder player.\n\t\t</p>\n\t\t<p>\n\t\t\t<strong>Glicko-1</strong> is a different rating system. It has\n\t\t\trating and deviation values.\n\t\t</p>\n\t\t<p>\n\t\t\tNote that win/loss should not be used to estimate skill, since\n\t\t\twho you play against is much more important than how many times\n\t\t\tyou win or lose. Our other stats like Elo and GXE are much better\n\t\t\tfor estimating skill.\n\t\t</p>\n\t</div>;\n}\n\nclass PagePanel extends PSRoomPanel<PageRoom> {\n\tclientRooms: {[key: string]: JSX.Element} = {'ladderhelp': <PageLadderHelp room={this.props.room}/>};\n\n\t/**\n\t * @return true to prevent line from being sent to server\n\t */\n\treceiveLine(args: Args) {\n\t\tconst {room} = this.props;\n\t\tswitch (args[0]) {\n\t\tcase 'title':\n\t\t\troom.title = args[1];\n\t\t\tPS.update();\n\t\t\treturn true;\n\t\tcase 'tempnotify': {\n\t\t\tconst [, id, title, body] = args;\n\t\t\troom.notify({title, body, id});\n\t\t\treturn true;\n\t\t}\n\t\tcase 'tempnotifyoff': {\n\t\t\tconst [, id] = args;\n\t\t\troom.dismissNotification(id);\n\t\t\treturn true;\n\t\t}\n\t\tcase 'selectorhtml':\n\t\t\tconst pageHTMLContainer = this.base!.querySelector('.page-html-container');\n\t\t\tconst selectedElement = pageHTMLContainer?.querySelector(args[1]);\n\t\t\tif (!selectedElement) return;\n\t\t\tselectedElement.innerHTML = BattleLog.sanitizeHTML(args.slice(2).join('|'));\n\t\t\troom.isSubtleNotifying = true;\n\t\t\treturn true;\n\t\tcase 'noinit':\n\t\t\tif (args[1] === 'namerequired') {\n\t\t\t\troom.setHTMLData(args[2]);\n\t\t\t}\n\t\t\treturn true;\n\t\tcase 'pagehtml':\n\t\t\troom.setHTMLData(args[1]);\n\t\t\treturn true;\n\t\t}\n\t}\n\trender() {\n\t\tconst {room} = this.props;\n\t\tlet renderPage;\n\t\tif (room.page !== undefined && this.clientRooms[room.page]) {\n\t\t\trenderPage = this.clientRooms[room.page];\n\t\t} else {\n\t\t\tif (room.loading) {\n\t\t\t\trenderPage = <p>Loading...</p>;\n\t\t\t} else {\n\t\t\t\trenderPage = <div class=\"page-html-container\">\n\t\t\t\t\t<SanitizedHTML>{room.htmlData || ''}</SanitizedHTML>\n\t\t\t\t</div>;\n\t\t\t}\n\t\t}\n\t\treturn <PSPanelWrapper room={room} scrollable>\n\t\t\t{renderPage}\n\t\t</PSPanelWrapper>;\n\t}\n}\n\nPS.roomTypes['html'] = {\n\tModel: PageRoom,\n\tComponent: PagePanel,\n};\nPS.updateRoomTypes();\n"],"file":"panel-page.js"}