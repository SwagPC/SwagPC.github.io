{"version":3,"sources":["../src/battle-sound.ts"],"names":["BattleBGM","url","loopstart","loopend","sound","timer","undefined","isPlaying","isActuallyPlaying","willRewind","play","resume","actuallyResume","pause","actuallyPause","update","stop","destroy","BattleSound","deleteBgm","currentBgm","getSound","currentTime","volume","bgmVolume","updateTime","clearTimeout","progress","setTimeout","Math","max","current","bgm","soundCache","effectVolume","muted","window","HTMLAudioElement","document","createElement","src","Config","routes","client","playEffect","playSound","effect","loadBgm","replaceBGM","push","soundIndex","indexOf","splice","setMute","loudnessPercentToAmplitudePercent","loudnessPercent","decibels","log","pow","setBgmVolume","setEffectVolume","PS","prefs","subscribeAndRun","key","effectvolume","musicvolume","mute"],"mappings":";AACaA,S;;;;;;;;;;;;;;;;;;;;;;AAsBZ,mBAAYC,GAAZ,CAAyBC,SAAzB,CAA4CC,OAA5C,CAA6D,MAhB7DC,KAgB6D,aAf7DH,GAe6D,aAd7DI,KAc6D,CAdjCC,SAciC,MAb7DJ,SAa6D,aAZ7DC,OAY6D,aAN7DI,SAM6D,CANjD,KAMiD,MAL7DC,iBAK6D,CALzC,KAKyC,MAD7DC,UAC6D,CADhD,IACgD;AAC5D,KAAKR,GAAL,CAAWA,GAAX;AACA,KAAKC,SAAL,CAAiBA,SAAjB;AACA,KAAKC,OAAL,CAAeA,OAAf;AACA,C;AACDO,I,CAAA,eAAO;AACN,KAAKD,UAAL,CAAkB,IAAlB;AACA,KAAKE,MAAL;AACA,C;AACDA,M,CAAA,iBAAS;AACR,KAAKJ,SAAL,CAAiB,IAAjB;AACA,KAAKK,cAAL;AACA,C;AACDC,K,CAAA,gBAAQ;AACP,KAAKN,SAAL,CAAiB,KAAjB;AACA,KAAKO,aAAL;AACAd,SAAS,CAACe,MAAV;AACA,C;AACDC,I,CAAA,eAAO;AACN,KAAKH,KAAL;AACA,KAAKJ,UAAL,CAAkB,IAAlB;AACA,C;AACDQ,O,CAAA,kBAAU;AACTC,WAAW,CAACC,SAAZ,CAAsB,IAAtB;AACA,KAAKN,KAAL;AACA,C;;AAEDD,c,CAAA,yBAAiB;AAChB,GAAI,OAASM,WAAW,CAACE,UAAZ,EAAb,CAAuC;AACvC,GAAI,KAAKZ,iBAAT,CAA4B;;AAE5B,GAAI,CAAC,KAAKJ,KAAV,CAAiB,KAAKA,KAAL,CAAac,WAAW,CAACG,QAAZ,CAAqB,KAAKpB,GAA1B,CAAb;AACjB,GAAI,CAAC,KAAKG,KAAV,CAAiB;AACjB,GAAI,KAAKK,UAAT,CAAqB,KAAKL,KAAL,CAAWkB,WAAX,CAAyB,CAAzB;AACrB,KAAKb,UAAL,CAAkB,KAAlB;AACA,KAAKD,iBAAL,CAAyB,IAAzB;AACA,KAAKJ,KAAL,CAAWmB,MAAX,CAAoBL,WAAW,CAACM,SAAZ,CAAwB,GAA5C;AACA,KAAKpB,KAAL,CAAWM,IAAX;AACA,KAAKe,UAAL;AACA,C;AACDX,a,CAAA,wBAAgB;AACf,GAAI,CAAC,KAAKN,iBAAV,CAA6B;AAC7B,KAAKA,iBAAL,CAAyB,KAAzB;AACA,KAAKJ,KAAL,CAAYS,KAAZ;AACA,KAAKY,UAAL;AACA,C;;;;AAIDA,U,CAAA,qBAAa;AACZC,YAAY,CAAC,KAAKrB,KAAN,CAAZ;AACA,KAAKA,KAAL,CAAaC,SAAb;AACA,GAAI,OAASY,WAAW,CAACE,UAAZ,EAAb,CAAuC;AACvC,GAAI,CAAC,KAAKhB,KAAV,CAAiB;;AAEjB,GAAMuB,CAAAA,QAAQ,CAAG,KAAKvB,KAAL,CAAWkB,WAAX,CAAyB,IAA1C;AACA,GAAIK,QAAQ,CAAG,KAAKxB,OAAL,CAAe,IAA9B,CAAoC;AACnC,KAAKC,KAAL,CAAWkB,WAAX,EAA0B,CAAC,KAAKnB,OAAL,CAAe,KAAKD,SAArB,EAAkC,IAA5D;AACA;;AAED,KAAKG,KAAL,CAAauB,UAAU,CAAC,UAAM;AAC7B,KAAI,CAACH,UAAL;AACA,CAFsB,CAEpBI,IAAI,CAACC,GAAL,CAAS,KAAK3B,OAAL,CAAewB,QAAxB,CAAkC,CAAlC,CAFoB,CAAvB;AAGA,C;;AAEMZ,M,CAAP,iBAAgB;AACf,GAAMgB,CAAAA,OAAO,CAAGb,WAAW,CAACE,UAAZ,EAAhB,CADe;AAEGF,WAAW,CAACc,GAFf,iCAEoB,CAA9B,GAAMA,CAAAA,GAAG,qBAAT;AACJ,GAAIA,GAAG,CAACzB,SAAR,CAAmB;AAClB,GAAIyB,GAAG,GAAKD,OAAZ,CAAqB;AACpBC,GAAG,CAACpB,cAAJ;AACA,CAFD,IAEO;AACNoB,GAAG,CAAClB,aAAJ;AACA;AACD;AACD;AACD,C;;;AAGK,GAAMI,CAAAA,WAAW,CAAG;AAC1Be,UAD0B,CACkC,EADlC;;AAG1BD,GAH0B,CAGP,EAHO;;;AAM1BE,YAN0B,CAMX,EANW;AAO1BV,SAP0B,CAOd,EAPc;AAQ1BW,KAR0B,CAQlB,KARkB;;AAU1Bd,QAV0B,CAU1B,kBAASpB,GAAT,CAAsB;AACrB,GAAI,CAACmC,MAAM,CAACC,gBAAZ,CAA8B;AAC9B,GAAI,KAAKJ,UAAL,CAAgBhC,GAAhB,CAAJ,CAA0B,MAAO,MAAKgC,UAAL,CAAgBhC,GAAhB,CAAP;AAC1B,GAAI;AACH,GAAMG,CAAAA,KAAK,CAAGkC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAnC,KAAK,CAACoC,GAAN,CAAY,WAAaC,MAAM,CAACC,MAAP,CAAcC,MAA3B,CAAoC,GAApC,CAA0C1C,GAAtD;AACAG,KAAK,CAACmB,MAAN,CAAe,KAAKW,YAAL,CAAoB,GAAnC;AACA,KAAKD,UAAL,CAAgBhC,GAAhB,EAAuBG,KAAvB;AACA,MAAOA,CAAAA,KAAP;AACA,CAAC,cAAM,CAAE;AACV,CApByB;;AAsB1BwC,UAtB0B,CAsB1B,oBAAW3C,GAAX,CAAwB;AACvB,KAAK4C,SAAL,CAAe5C,GAAf,CAAoB,KAAKkC,KAAL,CAAa,CAAb,CAAiB,KAAKD,YAA1C;AACA,CAxByB;;AA0B1BW,SA1B0B,CA0B1B,mBAAU5C,GAAV,CAAuBsB,MAAvB,CAAuC;AACtC,GAAI,CAACA,MAAL,CAAa;AACb,GAAMuB,CAAAA,MAAM,CAAG,KAAKzB,QAAL,CAAcpB,GAAd,CAAf;AACA,GAAI6C,MAAJ,CAAY;AACXA,MAAM,CAACvB,MAAP,CAAgBA,MAAM,CAAG,GAAzB;AACAuB,MAAM,CAACpC,IAAP;AACA;AACD,CAjCyB;;;AAoC1BqC,OApC0B,CAoC1B,iBAAQ9C,GAAR,CAAqBC,SAArB,CAAwCC,OAAxC,CAAyD6C,UAAzD,CAAwF;AACvF,GAAIA,UAAJ,CAAgB;AACfA,UAAU,CAAChC,IAAX;AACA,KAAKG,SAAL,CAAe6B,UAAf;AACA;;AAED,GAAMhB,CAAAA,GAAG,CAAG,GAAIhC,CAAAA,SAAJ,CAAcC,GAAd,CAAmBC,SAAnB,CAA8BC,OAA9B,CAAZ;AACA,KAAK6B,GAAL,CAASiB,IAAT,CAAcjB,GAAd;AACA,MAAOA,CAAAA,GAAP;AACA,CA7CyB;AA8C1Bb,SA9C0B,CA8C1B,mBAAUa,GAAV,CAA0B;AACzB,GAAMkB,CAAAA,UAAU,CAAGhC,WAAW,CAACc,GAAZ,CAAgBmB,OAAhB,CAAwBnB,GAAxB,CAAnB;AACA,GAAIkB,UAAU,EAAI,CAAlB,CAAqBhC,WAAW,CAACc,GAAZ,CAAgBoB,MAAhB,CAAuBF,UAAvB,CAAmC,CAAnC;AACrB,CAjDyB;;AAmD1B9B,UAnD0B,CAmD1B,qBAAa;AACZ,GAAI,CAAC,KAAKI,SAAN,EAAmB,KAAKW,KAA5B,CAAmC,MAAO,MAAP,CADvB;AAEM,KAAKH,GAFX,4BAEgB,CAAvB,GAAMA,CAAAA,GAAG,eAAT;AACJ,GAAIA,GAAG,CAACzB,SAAR,CAAmB,MAAOyB,CAAAA,GAAP;AACnB;AACD,MAAO,KAAP;AACA,CAzDyB;;;AA4D1BqB,OA5D0B,CA4D1B,iBAAQlB,KAAR,CAAwB;AACvBA,KAAK,CAAG,CAAC,CAACA,KAAV;AACA,GAAI,KAAKA,KAAL,GAAeA,KAAnB,CAA0B;AAC1B,KAAKA,KAAL,CAAaA,KAAb;AACAnC,SAAS,CAACe,MAAV;AACA,CAjEyB;;AAmE1BuC,iCAnE0B,CAmE1B,2CAAkCC,eAAlC,CAA2D;;AAE1D,GAAIC,CAAAA,QAAQ,CAAG,GAAK3B,IAAI,CAAC4B,GAAL,CAASF,eAAe,CAAG,GAA3B,CAAL,CAAuC1B,IAAI,CAAC4B,GAAL,CAAS,CAAT,CAAtD;AACA,MAAO5B,CAAAA,IAAI,CAAC6B,GAAL,CAAS,EAAT,CAAaF,QAAQ,CAAG,EAAxB,EAA8B,GAArC;AACA,CAvEyB;AAwE1BG,YAxE0B,CAwE1B,sBAAanC,SAAb,CAAgC;AAC/B,KAAKA,SAAL,CAAiB,KAAK8B,iCAAL,CAAuC9B,SAAvC,CAAjB;AACAxB,SAAS,CAACe,MAAV;AACA,CA3EyB;AA4E1B6C,eA5E0B,CA4E1B,yBAAgB1B,YAAhB,CAAsC;AACrC,KAAKA,YAAL,CAAoB,KAAKoB,iCAAL,CAAuCpB,YAAvC,CAApB;AACA,CA9EyB,sBAApB;;;AAiFP,GAAI,MAAO2B,CAAAA,EAAP,GAAc,QAAlB,CAA4B;AAC3BA,EAAE,CAACC,KAAH,CAASC,eAAT,CAAyB,SAAAC,GAAG,CAAI;AAC/B,GAAI,CAACA,GAAD,EAAQA,GAAG,GAAK,aAAhB,EAAiCA,GAAG,GAAK,cAAzC,EAA2DA,GAAG,GAAK,MAAvE,CAA+E;AAC9E9C,WAAW,CAACgB,YAAZ,CAA2B2B,EAAE,CAACC,KAAH,CAASG,YAApC;AACA/C,WAAW,CAACM,SAAZ,CAAwBqC,EAAE,CAACC,KAAH,CAASI,WAAjC;AACAhD,WAAW,CAACiB,KAAZ,CAAoB0B,EAAE,CAACC,KAAH,CAASK,IAA7B;AACAnE,SAAS,CAACe,MAAV;AACA;AACD,CAPD;AAQA","sourcesContent":["\nexport class BattleBGM {\n\t/**\n\t * May be shared with other BGM objects: every battle has its own BattleBGM\n\t * object, but two battles with the same music will have the same HTMLAudioElement\n\t * object.\n\t */\n\tsound?: HTMLAudioElement;\n\turl: string;\n\ttimer: number | undefined = undefined;\n\tloopstart: number;\n\tloopend: number;\n\t/**\n\t * When multiple battles with BGM are open, they will be `isPlaying`, but only the\n\t * first one will be `isActuallyPlaying`. In addition, muting volume or setting\n\t * BGM volume to 0 will set `isActuallyPlaying` to false.\n\t */\n\tisPlaying = false;\n\tisActuallyPlaying = false;\n\t/**\n\t * The sound should be rewound when it next plays.\n\t */\n\twillRewind = true;\n\tconstructor(url: string, loopstart: number, loopend: number) {\n\t\tthis.url = url;\n\t\tthis.loopstart = loopstart;\n\t\tthis.loopend = loopend;\n\t}\n\tplay() {\n\t\tthis.willRewind = true;\n\t\tthis.resume();\n\t}\n\tresume() {\n\t\tthis.isPlaying = true;\n\t\tthis.actuallyResume();\n\t}\n\tpause() {\n\t\tthis.isPlaying = false;\n\t\tthis.actuallyPause();\n\t\tBattleBGM.update();\n\t}\n\tstop() {\n\t\tthis.pause();\n\t\tthis.willRewind = true;\n\t}\n\tdestroy() {\n\t\tBattleSound.deleteBgm(this);\n\t\tthis.pause();\n\t}\n\n\tactuallyResume() {\n\t\tif (this !== BattleSound.currentBgm()) return;\n\t\tif (this.isActuallyPlaying) return;\n\n\t\tif (!this.sound) this.sound = BattleSound.getSound(this.url);\n\t\tif (!this.sound) return;\n\t\tif (this.willRewind) this.sound.currentTime = 0;\n\t\tthis.willRewind = false;\n\t\tthis.isActuallyPlaying = true;\n\t\tthis.sound.volume = BattleSound.bgmVolume / 100;\n\t\tthis.sound.play();\n\t\tthis.updateTime();\n\t}\n\tactuallyPause() {\n\t\tif (!this.isActuallyPlaying) return;\n\t\tthis.isActuallyPlaying = false;\n\t\tthis.sound!.pause();\n\t\tthis.updateTime();\n\t}\n\t/**\n\t * Handles the hard part of looping the sound\n\t */\n\tupdateTime() {\n\t\tclearTimeout(this.timer);\n\t\tthis.timer = undefined;\n\t\tif (this !== BattleSound.currentBgm()) return;\n\t\tif (!this.sound) return;\n\n\t\tconst progress = this.sound.currentTime * 1000;\n\t\tif (progress > this.loopend - 1000) {\n\t\t\tthis.sound.currentTime -= (this.loopend - this.loopstart) / 1000;\n\t\t}\n\n\t\tthis.timer = setTimeout(() => {\n\t\t\tthis.updateTime();\n\t\t}, Math.max(this.loopend - progress, 1));\n\t}\n\n\tstatic update() {\n\t\tconst current = BattleSound.currentBgm();\n\t\tfor (const bgm of BattleSound.bgm) {\n\t\t\tif (bgm.isPlaying) {\n\t\t\t\tif (bgm === current) {\n\t\t\t\t\tbgm.actuallyResume();\n\t\t\t\t} else {\n\t\t\t\t\tbgm.actuallyPause();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport const BattleSound = new class {\n\tsoundCache: {[url: string]: HTMLAudioElement | undefined} = {};\n\n\tbgm: BattleBGM[] = [];\n\n\t// options\n\teffectVolume = 50;\n\tbgmVolume = 50;\n\tmuted = false;\n\n\tgetSound(url: string) {\n\t\tif (!window.HTMLAudioElement) return;\n\t\tif (this.soundCache[url]) return this.soundCache[url];\n\t\ttry {\n\t\t\tconst sound = document.createElement('audio');\n\t\t\tsound.src = 'https://' + Config.routes.client + '/' + url;\n\t\t\tsound.volume = this.effectVolume / 100;\n\t\t\tthis.soundCache[url] = sound;\n\t\t\treturn sound;\n\t\t} catch {}\n\t}\n\n\tplayEffect(url: string) {\n\t\tthis.playSound(url, this.muted ? 0 : this.effectVolume);\n\t}\n\n\tplaySound(url: string, volume: number) {\n\t\tif (!volume) return;\n\t\tconst effect = this.getSound(url);\n\t\tif (effect) {\n\t\t\teffect.volume = volume / 100;\n\t\t\teffect.play();\n\t\t}\n\t}\n\n\t/** loopstart and loopend are in milliseconds */\n\tloadBgm(url: string, loopstart: number, loopend: number, replaceBGM?: BattleBGM | null) {\n\t\tif (replaceBGM) {\n\t\t\treplaceBGM.stop();\n\t\t\tthis.deleteBgm(replaceBGM);\n\t\t}\n\n\t\tconst bgm = new BattleBGM(url, loopstart, loopend);\n\t\tthis.bgm.push(bgm);\n\t\treturn bgm;\n\t}\n\tdeleteBgm(bgm: BattleBGM) {\n\t\tconst soundIndex = BattleSound.bgm.indexOf(bgm);\n\t\tif (soundIndex >= 0) BattleSound.bgm.splice(soundIndex, 1);\n\t}\n\n\tcurrentBgm() {\n\t\tif (!this.bgmVolume || this.muted) return false;\n\t\tfor (const bgm of this.bgm) {\n\t\t\tif (bgm.isPlaying) return bgm;\n\t\t}\n\t\treturn null;\n\t}\n\n\t// setting\n\tsetMute(muted: boolean) {\n\t\tmuted = !!muted;\n\t\tif (this.muted === muted) return;\n\t\tthis.muted = muted;\n\t\tBattleBGM.update();\n\t}\n\n\tloudnessPercentToAmplitudePercent(loudnessPercent: number) {\n\t\t// 10 dB is perceived as approximately twice as loud\n\t\tlet decibels = 10 * Math.log(loudnessPercent / 100) / Math.log(2);\n\t\treturn Math.pow(10, decibels / 20) * 100;\n\t}\n\tsetBgmVolume(bgmVolume: number) {\n\t\tthis.bgmVolume = this.loudnessPercentToAmplitudePercent(bgmVolume);\n\t\tBattleBGM.update();\n\t}\n\tsetEffectVolume(effectVolume: number) {\n\t\tthis.effectVolume = this.loudnessPercentToAmplitudePercent(effectVolume);\n\t}\n};\n\nif (typeof PS === 'object') {\n\tPS.prefs.subscribeAndRun(key => {\n\t\tif (!key || key === 'musicvolume' || key === 'effectvolume' || key === 'mute') {\n\t\t\tBattleSound.effectVolume = PS.prefs.effectvolume;\n\t\t\tBattleSound.bgmVolume = PS.prefs.musicvolume;\n\t\t\tBattleSound.muted = PS.prefs.mute;\n\t\t\tBattleBGM.update();\n\t\t}\n\t});\n}\n"],"file":"battle-sound.js"}